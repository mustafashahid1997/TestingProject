/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
/**
 *
 * @author ranas
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form GameWindow
     */
     int Grid=100;
     int GridSize=10;
     int sum=0;
     public static int time =0;
     public static int TotalScore=0;
     int TotalLives=1;
     int LivesCount=0;
     JPanel buttonPanel = new JPanel();
     JPanel containerPanel = new JPanel();
     JButton buttonsGrid[]=new JButton[Grid];
     JFrame frame;
     Cell cellGrid=new Cell(GridSize);
     
     
    public Game() {
        initComponents();
        cellGrid.generateRandom();         
        time=0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stats = new javax.swing.JPanel();
        lbltime = new javax.swing.JTextField();
        lblscore = new javax.swing.JTextField();
        timelbl = new javax.swing.JLabel();
        scorelbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtlives = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbltime.setEditable(false);
        lbltime.setBackground(new java.awt.Color(0, 0, 0));
        lbltime.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        lbltime.setForeground(new java.awt.Color(255, 255, 255));
        lbltime.setText("0");
        lbltime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 8));
        lbltime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbltimeActionPerformed(evt);
            }
        });

        lblscore.setEditable(false);
        lblscore.setBackground(new java.awt.Color(0, 0, 0));
        lblscore.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        lblscore.setForeground(new java.awt.Color(255, 255, 255));
        lblscore.setText("0");
        lblscore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 8));
        lblscore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblscoreActionPerformed(evt);
            }
        });

        timelbl.setBackground(new java.awt.Color(18, 45, 61));
        timelbl.setFont(new java.awt.Font("Tahoma", 3, 19)); // NOI18N
        timelbl.setForeground(new java.awt.Color(255, 255, 255));
        timelbl.setText("Time:");

        scorelbl.setFont(new java.awt.Font("Tahoma", 3, 19)); // NOI18N
        scorelbl.setForeground(new java.awt.Color(255, 255, 255));
        scorelbl.setText("Score:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 19)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Lives:");

        txtlives.setBackground(new java.awt.Color(0, 0, 0));
        txtlives.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        txtlives.setForeground(new java.awt.Color(255, 255, 255));
        txtlives.setText("0");
        txtlives.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 8));

        javax.swing.GroupLayout statsLayout = new javax.swing.GroupLayout(stats);
        stats.setLayout(statsLayout);
        statsLayout.setHorizontalGroup(
            statsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbltime, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scorelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblscore, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtlives, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );
        statsLayout.setVerticalGroup(
            statsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(statsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblscore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbltime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timelbl)
                    .addComponent(scorelbl)
                    .addComponent(jLabel1)
                    .addComponent(txtlives, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(stats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(495, 493));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lbltimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lbltimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lbltimeActionPerformed

    private void lblscoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblscoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblscoreActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
                
              
            }
        });
    }
    public void createButton()
    {
        Font font = new Font("SansSerif", Font.BOLD, 22);
        for (int i=0; i < Grid; i++) 
         {
            buttonsGrid[i] = new JButton();
            buttonsGrid[i].setBackground(Color.DARK_GRAY);
            buttonsGrid[i].setFont(font);
            buttonsGrid[i].setBorder(BorderFactory.createLineBorder(Color.BLACK, 4));
            buttonPanel.add(buttonsGrid[i]);
         }
    }
     public void display(){
         
         
        frame = new JFrame("MINESWEEPER");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //frame.setLocationRelativeTo(null);
        
         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation(dim.width/2-frame.getSize().width-550/2, dim.height/2-frame.getSize().height-700/2); 
        stats.setPreferredSize(new Dimension(100, 100));

        

        
        
        stats.setBackground(Color.BLACK);
        containerPanel.setBackground(Color.BLACK);
        buttonPanel.setBackground(Color.BLACK); 
        
        buttonPanel.setLayout(new GridLayout(GridSize,GridSize));
        
      
        createButton();
        buttonPanel.setPreferredSize(new Dimension(500, 500));
        containerPanel.add(buttonPanel);
        
        
        frame.getContentPane().add(containerPanel,BorderLayout.WEST);
        frame.add(stats, BorderLayout.NORTH);
        frame.pack();
        addEvent();
        txtlives.setText(Integer.toString(TotalLives));
        frame.setVisible(true);
        CheckifWinner();
        JOptionPane.showMessageDialog(null, "1.Reveal Each Cell\n2.Each cell contains mines or count of neighbouring mines\n3.Finding 3 Empty Cells yields 1 Live\n***Win If You Can***", "How To Play " ,  JOptionPane.INFORMATION_MESSAGE);
        
}
     
     public void CheckCell(int i)
     {       
         timer.start();
         if(cellGrid.cells[i]==-1)
         {
            // showall();
             mineFound(i);

             
         }
         else if(cellGrid.cells[i]>0)
         {

             TotalScore++;
             lblscore.setText(Integer.toString(TotalScore));
             numberFound(i);
              if(TotalScore==sum)
             {
                 JOptionPane.showMessageDialog(null, "Your Score is: "+Integer.toString(TotalScore)+" with time: "+Integer.toString(time)+"(s)","Congratulations. You Win",  JOptionPane.INFORMATION_MESSAGE);
             }
         }
         else 
         {
            revealEmptyButton(i);
           // revealEmpty(i);
         }
     }  

   public void CheckifWinner()
   {

       for(int i=0;i<Grid;i++)
       {
           if(cellGrid.cells[i]!=-1)
           sum=sum+cellGrid.cells[i];          
       }    
   }
     public void revealEmptyButton(int i)
    {
        if(cellGrid.cells[i]==0)
        {  
            buttonsGrid[i].setBackground(Color.BLACK);     
            LivesCount++;
            if(LivesCount==3)
            {
                TotalLives++;
                LivesCount=0;
                txtlives.setText(Integer.toString(TotalLives));
            }  
        }
        
    }
     
    public void revealEmptyCell(int i)
    {
        if(cellGrid.cells[i]==0)
        {
            buttonsGrid[i].setBackground(Color.DARK_GRAY);        
        }
        else 
        {
            numberFound(i);
        }
    }
    
    Timer timer = new Timer(1000, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                time++;
                lbltime.setText(Integer.toString(time));
        
            }
    });
    
    
    
    
    public boolean checkRange(int i)
    {
        for(int j=0;j<=90;j+=10)
        {
            if(i==j)
                return false;
        }
        for(int j=9;j<=99;j+=10)
        {
            if(i==j)
                return false;
        }
        return true;
    }
   
    
     public void showall()
     {
         for (int i=0;i<Grid;i++)
         {    
            if(cellGrid.cells[i]==-1)
             {
                Image img;
                try {
                    img = ImageIO.read(getClass().getResource("test.jpg"));
                       Image newimg = img.getScaledInstance( 49, 49,  java.awt.Image.SCALE_SMOOTH ) ;
                        buttonsGrid[i].setIcon(new ImageIcon(newimg));
                    
                } catch (IOException ex) {
                    Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
                }
             
             }      
         }
     }
     
     
     public void addEvent()
     {
         for (int i=0; i < Grid; i++) 
         {
            buttonsGrid[i].addActionListener(new Action());
         }    
    }
     
     class Action implements ActionListener
     {   
         public void actionPerformed(ActionEvent e)
         {
             for (int i=0; i < Grid; i++) 
            {
                if(e.getSource() == buttonsGrid[i])
                   CheckCell(i);                    
            }  
         }
     }
     
     private void shakeButton(JButton button) {
    final Point point = button.getLocation();
    final int delay = 60;
    Runnable r = new Runnable() {
      @Override
      public void run() {
        for (int i = 0; i < 30; i++) {
          try {

            moveButton(new Point(point.x + 5, point.y),button);
            Thread.sleep(delay);
            moveButton(point,button);
            Thread.sleep(delay);
            moveButton(new Point(point.x - 5, point.y),button);
            Thread.sleep(delay);
            moveButton(new Point(point.x, point.y+5),button);
            Thread.sleep(delay);
            moveButton(point,button);
            Thread.sleep(delay);
            moveButton(new Point(point.x, point.y-5),button);
            Thread.sleep(delay);
            moveButton(point,button);
            Thread.sleep(delay);
          } catch (InterruptedException ex) {
            ex.printStackTrace();
          }
        }
      }
    };
    Thread t = new Thread(r);
    t.start();
  }

  private void moveButton(final Point p,JButton button) {
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        button.setLocation(p);
      }
    });
  }

     
     
     
     
     
     
     
     
     
     
     
     
     
    public  void mineFound(int i)
    {
      try
      {
      Image img = ImageIO.read(getClass().getResource("test.jpg"));
      Image newimg = img.getScaledInstance( 49, 49,  java.awt.Image.SCALE_SMOOTH ) ;
   
           shakeButton(buttonsGrid[i]);
           buttonsGrid[i].setIcon(new ImageIcon(newimg));
           txtlives.setText(Integer.toString(--TotalLives));
           if(TotalLives<=0)
           {
               
               timer.stop();
               
               JOptionPane.showMessageDialog(null, "Your Score is: "+Integer.toString(TotalScore)+" with time: "+Integer.toString(time)+"(s)","Game Over",  JOptionPane.INFORMATION_MESSAGE);
               
               
               ScoreTable st=new ScoreTable();
               st.setVisible(true);
               frame.setVisible(false);
           }
           
          
        }    
        catch (Exception ex) 
        {
            System.out.println(ex);
        }
    }
     public  void numberFound(int i)
    {
      try
      {     
           buttonsGrid[i].setText(Integer.toString(cellGrid.cells[i]));
        }    
        catch (Exception ex) 
        {
            System.out.println(ex);
        }
    }
     
     
     
      public boolean checkLast(int i)
    {      
        for(int j=9;j<=99;j+=10)
        {
            if(i==j)
                return false;
        }
        return true;
    }
     public boolean checkfirst(int i)
    {      
         for(int j=0;j<=90;j+=10)
        {
            if(i==j)
                return false;
        }
        return true;
    }
     
     
     public void revealEmpty(int i)
    {
        try{
            
            if (checkRange(i)==true){
            if(i-11>=0 && i-11<=99 )
            {
                 if(cellGrid.cells[i-11]!=-1 )
                 {
                     revealEmptyCell(i-11);
                 }
            }
            if(i-10>=0 && i-10<=99 )
            {
                 if(cellGrid.cells[i-10]!=-1 )
                 {
                     revealEmptyCell(i-10);
                 }
            }
            if(i+11>=0 && i+11<=99 )
            {
                 if(cellGrid.cells[i+11]!=-1)
                 {
                     revealEmptyCell(i+11);
                 }
            }
            if(i+10>=0 && i+10<=99 )
            {
                 if(cellGrid.cells[i+10]!=-1)
                 {
                     revealEmptyCell(i+10);
                 }
            
            }
             if(i-1>=0 && i-1<=99 )
            {
                 if(cellGrid.cells[i-1]!=-1)
                 {
                     revealEmptyCell(i-1);
                 }
            }
            if(i+1>=0 && i+1<=99 )
            {
                 if(cellGrid.cells[i+1]!=-1)
                 {
                     revealEmptyCell(i+1);
                 }
            
            }            
             if(i-9>=0 && i-9<=99 )
            {
                 if(cellGrid.cells[i-9]!=-1)
                 {
                     revealEmptyCell(i-9);
                 }
            }
            if(i+9>=0 && i+9<=99 )
            {
                 if(cellGrid.cells[i+9]!=-1)
                 {
                     revealEmptyCell(i+9);
                 }
            
            }          
            }
            else
            {
                if(checkLast(i)==true)
                {
                      if(i-11>=0 && i-11<=99 )
            {
                 if(cellGrid.cells[i-11]!=-1 )
                 {
                     revealEmptyCell(i-11);
                 }
            }
            if(i-10>=0 && i-10<=99 )
            {
                 if(cellGrid.cells[i-10]!=-1 )
                 {
                     revealEmptyCell(i-10);
                 }
            }
                 if(i-1>=0 && i-1<=99 )
            {
                 if(cellGrid.cells[i-1]!=-1)
                 {
                     revealEmptyCell(i-1);
                 }
            }
                
                if(i+9>=0 && i+9<=99 )
            {
                 if(cellGrid.cells[i+9]!=-1)
                 {
                     revealEmptyCell(i+9);
                 }
            
            }      
              
                
                if(i+10>=0 && i+10<=99 )
            {
                 if(cellGrid.cells[i+10]!=-1)
                 {
                     revealEmptyCell(i+10);
                 }
            
            }
                }
                else if(checkfirst(i)==true)
                {
                     if(i-10>=0 && i-10<=99 )
            {
                 if(cellGrid.cells[i-10]!=-1 )
                 {
                     revealEmptyCell(i-10);
                 }
            }
                     
                     if(i-9>=0 && i-9<=99 )
            {
                 if(cellGrid.cells[i-9]!=-1)
                 {
                     revealEmptyCell(i-9);
                 }
            }
                     
                     if(i+1>=0 && i+1<=99 )
            {
                 if(cellGrid.cells[i+1]!=-1)
                 {
                     revealEmptyCell(i+1);
                 }
            
            }     
                     if(i+10>=0 && i+10<=99 )
            {
                 if(cellGrid.cells[i+10]!=-1)
                 {
                     revealEmptyCell(i+10);
                 }
            
            }
                      if(i+11>=0 && i+11<=99 )
            {
                 if(cellGrid.cells[i+11]!=-1)
                 {
                     revealEmptyCell(i+11);
                 }
            }
                }
            }
        }
        catch(Exception e)
        {
            
        }
    }
     
     
     
     
     
    private static Icon resizeIcon(ImageIcon icon, int resizedWidth, int resizedHeight) {
    Image img = icon.getImage();  
    Image resizedImage = img.getScaledInstance(resizedWidth, resizedHeight,  java.awt.Image.SCALE_SMOOTH);  
    return new ImageIcon(resizedImage);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField lblscore;
    private javax.swing.JTextField lbltime;
    private javax.swing.JLabel scorelbl;
    private javax.swing.JPanel stats;
    private javax.swing.JLabel timelbl;
    private javax.swing.JTextField txtlives;
    // End of variables declaration//GEN-END:variables
}
